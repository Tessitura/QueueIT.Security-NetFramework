<?xml version="1.0" encoding="utf-8"?>
<topic id="9c770124-51d9-49ed-90ae-c209b6471f5b" revisionNumber="2">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        In this section you can read about common implementation mistakes
        and countermeasures for them.
      </para>
    </introduction>

    <section>
      <title>Design for failure with health check implementation</title>
      <content>
        <para>
          The queue solution provides high availability, but we always recommend you design for failure.
          This can be archieved by polling our end at <link><![CDATA[https://healthcheck.queue-it.net/healthcheck.aspx/?c={your-customer-id}&e={your-event-id}]]></link>.
          Doing so on regular basis and handling the case when no response is recieved can improve your service towards your customers,
          i.e. presenting them with an alternative or just an explaination of the issue at hand.
        </para>
        <para>
          Please refer to the <link xlink:href="9269961f-84a9-4f6d-a63e-100becdbd51a">Reference Implementations</link> where concreate examples of the
          health check polling mechanism can be found.
        </para>
      </content>
    </section>

    <section>
      <title>Ensure correct alignment of expirations</title>
      <content>
        <para>
          A common mistake is misconfiguration of the different timout settings on the queue it platform.
          Below we mention the 3 available and how they are used.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>ticketExpiration:</legacyBold> Is a <link xlink:href="f439359a-4f2d-4a71-9f66-5c77a7d04b89">configuration setting</link> where you specify a timespan, i.e. "00:03:00" (3 min). This setting decides how long time a link to the target site can be used. The time should be long enough to cover clock-screw between your server and Queue-it' servers but short enough to prevent damage from users sharing the link on e.g. Twitter
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Queue number validity time:</legacyBold> This value is set up via the go management portal (<externalLink>
                <linkText>https://go.queue-it.net</linkText>
                <linkUri>https://go.queue-it.net</linkUri>
              </externalLink>) under advanced settings on the actual event. This setting decides how long time any given ticket is valid (e.g. issuing no new ticket when existing is still valid and user is revisiting the queue)
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>CookieExpiration:</legacyBold> Is a <link xlink:href="f439359a-4f2d-4a71-9f66-5c77a7d04b89">configuration setting</link> where you specify a timespan, i.e. "00:20:00" (20 min). This setting decides how long the session cookie is active on the target site.
            </para>
          </listItem>
        </list>
        <para>The important thing to remember here is that you need to follow the guidelines specified below. The values in the example are the default recommended ones.</para>
        <alert class="important">
          <para>
            <![CDATA[ticketExpiration (3 min) < QueueNumberValidity (10 min) <= CookieExpiration (20 min)]]>
          </para>
        </alert>
      </content>
    </section>

    <section>
      <title>Subdomain scenarios require correct CookieDomain setting</title>
      <content>
        <para>
          <legacyUnderline>Example:</legacyUnderline> Lets say you redirect your users to <legacyBold>www.ticketania.com</legacyBold> and from there on they go to <legacyBold>buy.ticketania.com</legacyBold>.
        </para>
        <para>
          In this situation you need to set the value of CookieDomain setting to <legacyBold>.ticketania.com</legacyBold> ensuring that the Known User validation mechanism still functions.
        </para>
        <code language="xml">
          <![CDATA[
...
<repositorySettings>
  <setting name="CookieDomain" value=".ticketania.com" />
  <setting name="CookieExpiration" value="00:20:00" />
</repositorySettings>
...
      ]]>
        </code>
        <para>
          More details can be found in <codeEntityReference>T:QueueIT.Security.CookieValidateResultRepository</codeEntityReference>.
        </para>
      </content>
    </section>

    <section>
      <title>Special handling in URL rewrite situations</title>
      <content>
        <para>
          If you experience your end users always are redirected back to the queue and therefore never ends up at the target URL, you could have an URL rewrite situation.
          This happens if you have some mechanism altering the URL, which then breaks the default Known User validation implementation.
        </para>
        <para>
          In this case you need to override the default url provider. Below you can see an example of this.
        </para>
        <code language="csharp">
          public class MyCustomUrlProvider : DefaultKnownUserUrlProvider
          {
          public override Uri GetUrl()
          {
          string internalUrl = base.GetUrl().ToString();
          string publicUrl = internalUrl.Replace("http", "https").Replace(":4490", "");
          return new Uri(publicUrl);
          }
          }
        </code>
        <para>
          Then register the implementation with the KnownUserFactory or provide the implementation to the KnownUserFactory.VerifyMd5Hash method. The registration should only be done once.
        </para>
        <code language="csharp">
          KnownUserFactory.Configure(urlProviderFactory: () => new MyCustomUrlProvider());
        </code>
      </content>
    </section>

    <section>
      <title>Browser cookie support</title>
      <content>
        <para>
          The implementation of the <codeEntityReference>T:QueueIT.Security.SessionValidationController</codeEntityReference> stores state
          in user cookies. The default <codeEntityReference>T:QueueIT.Security.CookieValidateResultRepository</codeEntityReference> adds
          one or more custom cookies and the <codeEntityReference>T:QueueIT.Security.SessionValidateResultRepository</codeEntityReference>
          uses on the built in session state which typically also relies on cookies. If the browser does not support cookies the
          <codeEntityReference>T:QueueIT.Security.SessionValidationController</codeEntityReference> is unable to detect if the user has
          already been through the queue and it does not know that cookies are not supported.
        </para>
        <alert class="important">
          <para>
            <![CDATA[We reccomend that your application detects that cookies are not supported and displays an error message to the user before invoking
          the SessionValidationController. If not users will be in an endless loop
          between the queue and the target application.]]>
          </para>
        </alert>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
